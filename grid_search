import numpy as np
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
from sklearn import decomposition
from sklearn import preprocessing
from sklearn.model_selection import TimeSeriesSplit, GridSearchCV
from sklearn import svm
import warnings
import os
warnings.filterwarnings("ignore", category=FutureWarning, module="sklearn", lineno=196)

tic = datetime.now()

filename = 'D:/QuantCN/nn_result/nn_together/等权组合/Oct_Week2/Mon/factors/factors_all.csv'
df = pd.read_csv(filename, encoding='gb18030')
labels_df = df.loc[:, ['OptionCode', 'EndDate', 'rtn', 'rtn_roll_-1', 'rtn_co', 'rtn_olc']]
values_df = df.iloc[:, 19:]
df = pd.concat([labels_df, values_df], axis=1)
df['EndDate'] = df.loc[:, 'EndDate'].apply(lambda x: pd.Timestamp(x))

factors_columns = df.iloc[:, 6:].columns.to_list()

option = labels_df.OptionCode.unique()
num_option = len(option)
End_Date = df.EndDate.unique()
num_date = len(End_Date)

# annual indicators
annual_df = pd.DataFrame(np.zeros((num_option, 4)), columns=['annual_rtn', 'annual_volatility', 'sharp_ratio',
                                                             'max_draw_down'], index=option)


class Para:
    method = 'SVM'
    percent_select = [0.3, 0.3]  # -- 30% positive examples, 30% negative examples
    parameters = [{'kernel': ['linear'], 'C': [0.1, 1], 'tol': [0.1, 0.5]},
                  {'kernel': ['poly'], 'gamma': ['scale'], 'degree': [2, 3], 'C': [0.1, 1], 'tol': [0.1, 0.5]}]

    path_results = 'D:/QuantCN/nn_result/nn_together/等权组合/Oct_Week2/Mon/SVM/cv/'
    pca_component = 90


para = Para()

os.mkdir(para.path_results)


def label_data(data):
    # initialize
    data.insert(loc=0, column='return_bin', value=np.nan)
    # sort by rtn in next two days
    data = data.sort_values(by='rtn_roll_-1', ascending=False)
    # decide how much options will be selected
    n_option_select = np.multiply(para.percent_select, data.shape[0])
    n_option_select = np.around(n_option_select).astype(int)
    # assign 1 or 0
    data.iloc[0:n_option_select[0], 0] = 1
    data.iloc[-n_option_select[1]:, 0] = -1
    data = data.dropna(axis=0)
    data = data.reset_index(drop=True)
    return data


pred_df = pd.DataFrame(columns=['OptionCode', 'EndDate', 'rtn', 'rtn_roll_-1', 'rtn_co', 'rtn_olc'] + list(range(para.pca_component)) + ['y_pred', 'y_score'])

for i in range(251, num_date):
    print(End_Date[i])

    df2 = df.loc[np.isin(df.loc[:, 'EndDate'].values, End_Date[i-251: i+1])]
    df2.reset_index(drop=True, inplace=True)
    x_factors = df2.iloc[:, 6:].values
    x_label = df2.iloc[:, :6]

    scaler = preprocessing.StandardScaler().fit(x_factors)
    x_norm = scaler.transform(x_factors)

    pca = decomposition.PCA(n_components=para.pca_component)
    pca.fit(x_norm)
    x_norm_pca = pca.transform(x_norm)

    x_factors_df = pd.DataFrame(x_norm_pca, columns=list(range(para.pca_component)))
    df3 = pd.concat([x_label, x_factors_df], axis=1)

    df4 = df3.loc[np.isin(df3.loc[:, 'EndDate'].values, End_Date[i-251: i-1])]
    df4 = label_data(df4)
    df4 = df4.sort_values(by='EndDate', ascending=False)
    X_train = df4.iloc[:, 7:].values
    x_data_pred_df = df3.loc[np.isin(df3.loc[:, 'EndDate'].values, End_Date[i])]
    X_test = x_data_pred_df.iloc[:, 6:].values
    y_train = df4.loc[:, 'return_bin'].values
    group = df4.loc[:, 'EndDate']
    model = svm.SVC(random_state=1)
    gptscv = TimeSeriesSplit(n_splits=5)
    clf = GridSearchCV(estimator=model, param_grid=para.parameters, scoring='roc_auc', cv=gptscv.split(X_train, y_train, groups=group))

    clf.fit(X_train, y_train)
    y_pred_test = clf.predict(X_test)
    y_pred_test[y_pred_test == 0] = -1
    y_score_test = clf.decision_function(X_test)

    num_col = x_data_pred_df.shape[1]
    x_data_pred_df.insert(loc=num_col, column='y_pred', value=y_pred_test)
    x_data_pred_df.insert(loc=num_col+1, column='y_score', value=y_score_test)
    pred_df = pd.concat([pred_df, x_data_pred_df], axis=0, ignore_index=True)

os.mkdir(para.path_results + 'pred/')
os.mkdir(para.path_results + 'graphs/')
pred_df_all = pd.DataFrame()
for j in range(num_option):
    code = option[j]
    print(code)
    sub_df = pred_df.loc[pred_df.loc[:, 'OptionCode'] == code]
    sub_df_size = sub_df.iloc[:, 0].size
    if sub_df_size > 0:
        sub_df.reset_index(drop=True, inplace=True)

        y_pred = sub_df.loc[:, 'y_pred'].values

        indicator = np.roll(y_pred, 1)
        indicator[0] = 0

        actual_rtn = sub_df.loc[:, 'rtn'].values * indicator
        net_value = (actual_rtn + 1).cumprod()
        tmp_max = np.maximum.accumulate(net_value)
        draw_down = net_value / tmp_max - 1
        daily_indicator = pd.DataFrame({'indicator': indicator, 'actual_rtn': actual_rtn, 'net_value': net_value,
                                        'draw_down': draw_down})

        sub_df = pd.concat([sub_df, daily_indicator], axis=1)
        sub_df.to_excel(para.path_results + 'pred/' + str(code) + '.xlsx', encoding='gb18030', index=False)
        pred_df_all = pd.concat([pred_df_all, sub_df], axis=0, ignore_index=True)
        # plot
        x = list(range(sub_df_size))
        y = net_value
        z = draw_down

        fig = plt.figure()
        ax1 = fig.add_subplot(111)
        l1, = ax1.plot(x, y, 'b', label='net value')
        ax1.set_ylabel('Net Value')
        ax1.set_yticks([0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2])
        ax1.set_title(str(code))

        ax2 = ax1.twinx()  # this is the important function
        l2, = ax2.plot(x, z, 'r', label='draw down')
        ax2.fill_between(x, z, where=(z < 0), facecolor='red')
        ax2.set_ylabel('Draw Down')
        ax2.set_yticks([-1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0])
        Date = sub_df.EndDate.unique()
        num_Date = len(Date)
        Date = pd.DataFrame(Date)
        Date = Date.loc[:, 0].apply(lambda x: str(x)[:-9])
        plt.xticks(ticks=list(np.linspace(0, num_Date, 5, endpoint=False, dtype=int)), labels=list(
            Date.loc[list(np.linspace(0, num_Date, 5, endpoint=False, dtype=int))].values))
        plt.xticks(rotation=90)
        plt.legend(handles=[l1, l2], labels=['net value', 'draw down'], loc='lower left')
        plt.savefig(para.path_results + 'graphs/' + str(int(code)) + '.png', dpi=120)
        plt.close(fig)

        annual_df.loc[code, 'annual_rtn'] = net_value[-1] ** (250 / sub_df_size) - 1
        annual_df.loc[code, 'annual_volatility'] = np.std(actual_rtn) * np.sqrt(250)
        annual_df.loc[code, 'sharp_ratio'] = annual_df.loc[code, 'annual_rtn'] / annual_df.loc[code, 'annual_volatility']
        annual_df.loc[code, 'max_draw_down'] = np.min(z)

annual_df.to_excel(para.path_results + 'annual_indicator.xlsx', encoding='gb18030', index=True)
pred_df_all.to_excel(para.path_results + 'pred_all.xlsx', encoding='gb18030', index=False)

Date1 = pred_df_all.EndDate.unique()
num1 = len(Date1)
Date = pd.DataFrame(Date1)
Date = Date.loc[:, 0].apply(lambda x: str(x)[:-9])

rtn = np.zeros(num1)

for i in range(num1):
    sub_df = pred_df_all.loc[pred_df_all.loc[:, 'EndDate'] == Date1[i]]
    rtn[i] = np.mean(sub_df.loc[:, 'actual_rtn'].values)

net_value_all = (1 + rtn).cumprod()

tmp_max_all = np.maximum.accumulate(net_value_all)
draw_down_all = net_value_all / tmp_max_all - 1

data = {'date': Date, 'rtn': list(rtn), 'net_value': list(net_value_all), 'draw_down': list(draw_down_all)}
port_indicator = pd.DataFrame(data)

port_indicator.to_excel(para.path_results + 'port_indicator.xlsx', encoding='gb18030', index=False)

x = range(1, num1+1)
fig = plt.figure()
ax1 = fig.add_subplot(111)
l1, = ax1.plot(x, net_value_all, 'b', label='net value')
ax1.set_ylabel('Net Value')
ax1.set_yticks([0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2])
ax1.set_title('portfolio indicators')

ax2 = ax1.twinx()  # this is the important function
l2, = ax2.plot(x, draw_down_all, 'r', label='draw down')
ax2.fill_between(x, draw_down_all, where=(draw_down_all < 0), facecolor='red')

ax2.set_ylabel('Draw Down')
ax2.set_yticks([-0.5, -0.4, -0.3, -0.2, -0.1, 0])
ax2.set_xlabel('End Date')

plt.xticks(ticks=list(np.linspace(0, num1, 5, endpoint=False, dtype=int)), labels=list(
 Date.loc[list(np.linspace(0, num1, 5, endpoint=False, dtype=int))].values))
plt.legend(handles=[l1, l2], labels=['net value', 'draw down'], loc='lower left')
plt.savefig(para.path_results + 'port_indicator.png', dpi=120)

toc = datetime.now()
print(toc)
print(toc - tic)
